#!/usr/bin/env python

import cgi
import gzip
import io
import json
import os
import sys
import urllib.parse
from wsgiref.util import FileWrapper

global data_dir
if os.getenv("OPENSHIFT_REPO_DIR"):
    repo_dir = os.getenv("OPENSHIFT_REPO_DIR")
    site_data_dir = os.getenv("OPENSHIFT_DATA_DIR")
    data_dir = os.path.join(repo_dir, "data")
    production_environment = True
    contest_url = 'http://balanceddiet-supeti.rhcloud.com/'
else:
    repo_dir = '/opt/app-root/src'
    site_data_dir = os.path.join(repo_dir, "site-data")
    data_dir = os.path.join(repo_dir, "data")
    production_environment = False
    contest_url = 'http://localhost:8052/'
sys.path.append(os.path.join(repo_dir, "libs"))

import contest
contest.init(site_data_dir)
import nutrika
nutrika.init(data_dir, contest_url + 'submit')
import badger

static_dir = os.path.join(repo_dir, "wsgi/static")

class Static(object):
    def __init__(self, path, content_type, compress=True):
        self.header = [('Content-Type', content_type)] 
        with open(os.path.join(static_dir, path), 'rb') as f:
            if compress:
                data = gzip.compress(f.read())
                self.header.append(('Content-Encoding', 'gzip'))
            else:
                data = f.read()
        self.header.append(('Content-Length', str(len(data))))
        self.response = [data]

static_objects = {
    'main.css': Static('main.css', 'text/css'),
    'main.html': Static('main.html', 'text/html; charset=UTF-8'),
    'ndb_list.html': Static('ndb_list.html', 'text/html; charset=UTF-8'),
    'Cherry-16.png': Static('Cherry-16.png', 'image/png', False),
    'Cherry-48.png': Static('Cherry-48.png', 'image/png', False),
    'Cherry-512.png': Static('Cherry-512.png', 'image/png', False),
    'contest.html': Static('contest.html', 'text/html; charset=UTF-8'),
    'my_plans.html': Static('my_plans.html', 'text/html; charset=UTF-8'),
    'received.html': Static('received.html', 'text/html; charset=UTF-8'),
    'Nutrika.css': Static('Nutrika.css', 'text/css'),
    'Nutrika-16.png': Static('Nutrika-16.png', 'image/png', False),
    'Nutrika-128.png': Static('Nutrika-128.png', 'image/png', False),
    'BDC-badge.png': Static('BDC-badge.png', 'image/png', False),
    'BDE-badge.png': Static('BDE-badge.png', 'image/png', False),
    'calculator.html': Static('calculator.html', 'text/html; charset=UTF-8'),
    'sitemap.xml': Static('sitemap.xml', 'text/html; charset=UTF-8', False),
    'robots.txt': Static('robots.txt', 'text/html; charset=UTF-8', False),
    '404.html': Static('404.html', 'text/html; charset=UTF-8')
}

class ReferenceData(object):
    def __init__(self, data, compress=False):
        self.header = [('Content-Type', 'application/json; charset=UTF-8')] 
        if compress:
            jd = gzip.compress(json.dumps(data).encode('UTF-8'))
            self.header.append(('Content-Encoding', 'gzip'))
        else:
            jd = json.dumps(data).encode('UTF-8')
        self.header.append(('Content-Length', str(len(jd))))
        self.response = [jd]

bdc = badger.BDC(site_data_dir)
contest_refs = {
    'badge_class': ReferenceData(bdc.badge_class),
    'issuer': ReferenceData(bdc.issuer),
    'revoked': ReferenceData(bdc.revoked),
}
bde = badger.BDE(site_data_dir)
calculator_refs = {
    'nutrient_links': ReferenceData(nutrika.nutrient_links, True),
    'foodgroups': ReferenceData(nutrika.foodgroup_dict, True),
    'foods': ReferenceData({'foods' : nutrika.food_list,
                            'version' : '3'}, True),
    'badge_class': ReferenceData(bde.badge_class),
    'issuer': ReferenceData(bde.issuer),
    'revoked': ReferenceData(bde.revoked),
}

def get_list():
    if userid:
        if userid in contest.user_headers:
            return 
            start_response('200 OK', contest.user_headers[userid])
            return contest.user_records[userid]
        else:
            return (empty_list, 'application/json; charset=UTF-8')
    else:
        return (empty_list, 'application/json; charset=UTF-8')

unauthorized_user = ('{ "result":"error", ' + 
                     '"response":"Authentication of user failed." }')
unauthorized_client = ('{ "result":"error", ' +
                       '"response":"Authentication of client failed." }')
successful_submit = '{ "result":"success" }'
empty_list = '[]'

def contest_app(environ, start_response, path_info):
    ctype = 'text/plain; charset=UTF-8'
    if len(path_info) == 1:
        static = static_objects['contest.html']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'json':
        if path_info[2] == 'list':
            start_response('200 OK', contest.list_header)
            return contest.list_response
        elif path_info[2] == 'record':
            header, response = contest.records[int(path_info[3])]
            start_response('200 OK', header)
            return response
        elif path_info[2] == 'mylist':
            length = int(environ['CONTENT_LENGTH'])
            request = json.loads(environ['wsgi.input'].read(length).decode())
            userid = contest.get_gplus_account_id(request['access_token'])
            if userid and userid in contest.user_headers:
                start_response('200 OK', contest.user_headers[userid])
                return contest.user_records[userid]
            else:
                response_body = empty_list
                ctype = 'application/json; charset=UTF-8'
        elif path_info[2] == 'delete':
            length = int(environ['CONTENT_LENGTH'])
            request = json.loads(environ['wsgi.input'].read(length).decode())
            userid = contest.get_gplus_account_id(request['access_token'])
            if userid: contest.delete_user_records(userid, request['rids'])
            if userid and userid in contest.user_headers:
                start_response('200 OK', contest.user_headers[userid])
                return contest.user_records[userid]
            else:
                response_body = empty_list
                ctype = 'application/json; charset=UTF-8'
        else:
            print("unkkown json request:"+str(path_info))
    elif path_info[1] == 'ref':
        ref = contest_refs[path_info[2]]
        start_response('200 OK', ref.header)
        return ref.response
    elif path_info[1] == 'feed':
        start_response('200 OK', contest.feed_header)
        return contest.feed_response
    elif not path_info[1]:
        static = static_objects['main.html']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'contest':
        static = static_objects['contest.html']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'my_plans':
        static = static_objects['my_plans.html']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'badges':
        response_body = bdc.get_badge(path_info[2])
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'badge':
        length = int(environ['CONTENT_LENGTH'])
        request = json.loads(environ['wsgi.input'].read(length).decode())
        print(request)
        response_body = bdc.issue_badge(request['persona_assertion'])
        print(response_body)
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'submit':
        length = int(environ['CONTENT_LENGTH'])
        request = json.loads(environ['wsgi.input'].read(length).decode())
        request['contents'] = nutrika.get_contents('plan_contents', 
                                                   request['plan_input'])
        user = request['user']
        if user['id'] == contest.get_gplus_account_id(user['access_token']):
            del user['access_token']
            contest.add_record(request)
            response_body = successful_submit
        else:
            response_body = unauthorized_user
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'static':
        static = static_objects[path_info[2]]
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'health':
        response_body = "1"
    elif path_info[1] == 'env':
        response_body = '\n'.join(['%s: %s' % (key, value)
                                   for key, value in sorted(environ.items())])
    else:
        static = static_objects['404.html']
        start_response('404 Not Found', static.header)
        return static.response

    status = '200 OK'
    response_headers = [('Content-Type', ctype), 
                        ('Content-Length', str(len(response_body)))]
    start_response(status, response_headers)
    return [ response_body.encode('UTF-8') ]

def calculator_app(environ, start_response, path_info):
    ctype = 'text/plain; charset=UTF-8'
    if len(path_info) == 1:
        static = static_objects['calculator.html']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'json':
        length = int(environ['CONTENT_LENGTH'])
        request = environ['wsgi.input'].read(length).decode()
        args = json.loads(request)
        print(args)
        contents = nutrika.get_contents(path_info[2], args)
        response_body = json.dumps(contents)
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'ref':
        ref = calculator_refs[path_info[2]]
        start_response('200 OK', ref.header)
        return ref.response
    elif not path_info[1]:
        #print('HTTP_USER_AGENT' + '=' + environ['HTTP_USER_AGENT'])
        static = static_objects['master.html']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'badges':
        response_body = bde.get_badge(path_info[2])
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'badge':
        length = int(environ['CONTENT_LENGTH'])
        request = json.loads(environ['wsgi.input'].read(length).decode())
        print(request)
        response_body = bde.issue_badge(request['persona_assertion'])
        print(response_body)
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'static':
        static = static_objects[path_info[2]]
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'login':
        response_body = json.dumps({'response':'OK'})
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'logout':
        response_body = json.dumps({'response':'OK'})
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'submit':
        length = int(environ['CONTENT_LENGTH'])
        request = json.loads(environ['wsgi.input'].read(length).decode())
        request['contents'] = nutrika.get_contents('plan_contents', 
                                                   request['plan_input'])
        response = json.loads(nutrika.submit_plan(json.dumps(request)))
        response['url'] = contest_url + 'my_plans'
        response_body = json.dumps(response)
        ctype = 'application/json; charset=UTF-8'
    elif path_info[1] == 'health':
        response_body = "1"
    elif path_info[1] == 'env':
        response_body = '\n'.join(['%s: %s' % (key, value)
                                   for key, value in sorted(environ.items())])
    else:
        static = static_objects['404.html']
        start_response('404 Not Found', static.header)
        return static.response

    status = '200 OK'
    response_headers = [('Content-Type', ctype), 
                        ('Content-Length', str(len(response_body)))]
    start_response(status, response_headers)
    return [response_body.encode('UTF-8') ]

def application(environ, start_response):
    ctype = 'text/plain; charset=UTF-8'
    path_info = environ['PATH_INFO'].split('/')
    if path_info[1] == 'contest':
        return contest_app(environ, start_response, path_info[1:])
    elif path_info[1] == 'calculator':
        return calculator_app(environ, start_response, path_info[1:])
    elif not path_info[1]:
        static = static_objects['main.html']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'static':
        static = static_objects[path_info[2]]
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'sitemap.xml':
        if 'HTTP_ACCEPT_ENCODING' in environ:
            print(environ['HTTP_ACCEPT_ENCODING'])
        else: print('no HTTP_ACCEPT_ENCODING')
        static = static_objects['sitemap.xml']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'robots.txt':
        if 'HTTP_ACCEPT_ENCODING' in environ:
            print('HTTP_ACCEPT_ENCODING=' + environ['HTTP_ACCEPT_ENCODING'])
        else: print('no HTTP_ACCEPT_ENCODING')
        static = static_objects['robots.txt']
        start_response('200 OK', static.header)
        return static.response
    elif path_info[1] == 'health':
        response_body = "1"
    elif path_info[1] == 'env':
        response_body = '\n'.join(['%s: %s' % (key, value)
                                   for key, value in sorted(environ.items())])
    else:
        static = static_objects['404.html']
        start_response('404 Not Found', static.header)
        return static.response

    status = '200 OK'
    response_headers = [('Content-Type', ctype), 
                        ('Content-Length', str(len(response_body)))]
    start_response(status, response_headers)
    return [ response_body.encode('UTF-8') ]

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    httpd = make_server('localhost', 8051, application)
    httpd.serve_forever()

